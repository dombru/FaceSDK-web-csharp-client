/*
 * Regula FaceSDK Web API
 *
 * Regula FaceSDK Web API # Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 4.1.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.FaceSDK.WebClient.Client.OpenAPIDateConverter;

namespace Regula.FaceSDK.WebClient.Model
{
    /// <summary>
    /// LivenessTransaction
    /// </summary>
    [DataContract]
    public partial class LivenessTransaction :  IEquatable<LivenessTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LivenessTransaction" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="config">A free-form object containing additional transaction attributes..</param>
        /// <param name="elapsed">elapsed.</param>
        /// <param name="portrait">URL for portrait image.</param>
        /// <param name="sessionId">sessionId.</param>
        /// <param name="status">Whether the liveness detection is confirmed (0) or not (1).</param>
        /// <param name="transactionId">transactionId.</param>
        /// <param name="video">video.</param>
        /// <param name="metadata">A free-form object containing the request information (server time, client IP, etc.)..</param>
        public LivenessTransaction(int code = default(int), Dictionary<string, Object> config = default(Dictionary<string, Object>), int elapsed = default(int), string portrait = default(string), string sessionId = default(string), int status = default(int), string transactionId = default(string), string video = default(string), Dictionary<string, Object> metadata = default(Dictionary<string, Object>))
        {
            this.Code = code;
            this.Config = config;
            this.Elapsed = elapsed;
            this.Portrait = portrait;
            this.SessionId = sessionId;
            this.Status = status;
            this.TransactionId = transactionId;
            this.Video = video;
            this.Metadata = metadata;
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public int Code { get; set; }

        /// <summary>
        /// A free-form object containing additional transaction attributes.
        /// </summary>
        /// <value>A free-form object containing additional transaction attributes.</value>
        [DataMember(Name="config", EmitDefaultValue=false)]
        public Dictionary<string, Object> Config { get; set; }

        /// <summary>
        /// Gets or Sets Elapsed
        /// </summary>
        [DataMember(Name="elapsed", EmitDefaultValue=false)]
        public int Elapsed { get; set; }

        /// <summary>
        /// URL for portrait image
        /// </summary>
        /// <value>URL for portrait image</value>
        [DataMember(Name="portrait", EmitDefaultValue=false)]
        public string Portrait { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name="sessionId", EmitDefaultValue=false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Whether the liveness detection is confirmed (0) or not (1)
        /// </summary>
        /// <value>Whether the liveness detection is confirmed (0) or not (1)</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int Status { get; set; }

        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets Video
        /// </summary>
        [DataMember(Name="video", EmitDefaultValue=false)]
        public string Video { get; set; }

        /// <summary>
        /// A free-form object containing the request information (server time, client IP, etc.).
        /// </summary>
        /// <value>A free-form object containing the request information (server time, client IP, etc.).</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LivenessTransaction {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Elapsed: ").Append(Elapsed).Append("\n");
            sb.Append("  Portrait: ").Append(Portrait).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  Video: ").Append(Video).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LivenessTransaction);
        }

        /// <summary>
        /// Returns true if LivenessTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of LivenessTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LivenessTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Config == input.Config ||
                    this.Config != null &&
                    input.Config != null &&
                    this.Config.SequenceEqual(input.Config)
                ) && 
                (
                    this.Elapsed == input.Elapsed ||
                    (this.Elapsed != null &&
                    this.Elapsed.Equals(input.Elapsed))
                ) && 
                (
                    this.Portrait == input.Portrait ||
                    (this.Portrait != null &&
                    this.Portrait.Equals(input.Portrait))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.Video == input.Video ||
                    (this.Video != null &&
                    this.Video.Equals(input.Video))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Config != null)
                    hashCode = hashCode * 59 + this.Config.GetHashCode();
                if (this.Elapsed != null)
                    hashCode = hashCode * 59 + this.Elapsed.GetHashCode();
                if (this.Portrait != null)
                    hashCode = hashCode * 59 + this.Portrait.GetHashCode();
                if (this.SessionId != null)
                    hashCode = hashCode * 59 + this.SessionId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.Video != null)
                    hashCode = hashCode * 59 + this.Video.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
